/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package core.main;

import core.connections.rmi.remote.RMIServer;
import core.connections.rmi.remote.RemoteMachine;
import core.connections.sockets.FileDownloader;
import core.main.listener.DownloadListener;
import core.controller.MainController;
import core.data.ClientList;
import static core.data.ClientList.clients;
import core.data.ClientModel;
import core.data.Descarga;
import core.gui.custom.CustomTableCellRenderer;
import core.gui.custom.DownloadsTableModel;
import core.utils.MyLogger;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luis
 */
public class Descargas extends javax.swing.JDialog implements DownloadListener{

    /**
     * Creates new form Descargas
     */
    private static JTable table;
    private static DownloadsTableModel model;
    public static ArrayList<String> descargas;
    public static ArrayList<Descarga> desc;
    private static HashMap<Integer,FileDownloader> downloadThread;
    private static HashMap<Integer,String[]>filas;
    private int selectedRow = 0;
    
    private static Descargas descargasFrame;
    private long lastFileSize;
    private String lastFileName;
    private Descarga descargaAReanudar;
    
    
    private Descargas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        filas = new HashMap<>();
        
        downloadThread = new HashMap<>();
        
        descargas = new ArrayList();
        model = new DownloadsTableModel();
        
        table = this.jTable1;
        table.setModel(model);
        table.setDefaultEditor(Object.class, null);
        table.setDefaultRenderer(Object.class,new CustomTableCellRenderer());

        setLocationRelativeTo(null);
        setAlwaysOnTop(true);
        
        
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = jTable1.rowAtPoint(evt.getPoint());
                int col = jTable1.columnAtPoint(evt.getPoint());
                if (row >= 0 && col >= 0) {
                    selectedRow = row;
                }
            }
        });
    }
    
    public static Descargas getInstance(){
        if(descargasFrame == null){
            descargasFrame = new Descargas(null, false);
            descargasFrame.loadData();
        }
        
        return descargasFrame;
    }
    
    public void update(){
        model = (DownloadsTableModel) table.getModel();
//        model.setRowCount(0);
//        
//        for (String name:descargas) {
//            model.addRow(new String[]{name,"Descargando..."});
//        }
    }
    
    private void loadData(){
        
        desc = MainController.getDescargas();
        
        model = (DownloadsTableModel) table.getModel();
        model.setRowCount(0);
        
        for (Descarga d:desc) {
            descargas.add(d.getName());
            downloadThread.put(d.getId(), null);
            if(d.getLastByte() < d.getSize()){
                d.setStatus("Incompleta");
            }
            model.addRow(d);
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Descargas");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Archivo", "Estado", "Porcentaje", "Origen"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Borrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Borrar todas");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Pausar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Reanudar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton1)
                    .addComponent(jButton4)
                    .addComponent(jButton2))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        

        
    }//GEN-LAST:event_formComponentShown

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        DownloadsTableModel dtm = (DownloadsTableModel) table.getModel();
        Descarga descarga = dtm.getDescargaAtIndex(selectedRow);

        String name = descarga.getName();
        String path = descarga.getPath();
        
        int response = JOptionPane.showConfirmDialog(this, "¿Desea borrar el registro de la descarga "+name+"?", "Aceptar",
        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        if (response == JOptionPane.YES_OPTION) {
            MainController.borrarDescarga(descarga.getId());
            dtm.remove(descarga);
            dtm.fireTableDataChanged();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DownloadsTableModel dtm = (DownloadsTableModel) table.getModel();
        int response = JOptionPane.showConfirmDialog(this, "¿Desea borrar todos los registros de descarga?", "Aceptar",
        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        if (response == JOptionPane.YES_OPTION) {
            MainController.borrarDescargas();
            dtm.setRowCount(0);
            dtm.fireTableDataChanged();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
          DownloadsTableModel dtm = (DownloadsTableModel) table.getModel();
          Descarga descarga = dtm.getDescargaAtIndex(selectedRow);
          FileDownloader fDownloader = downloadThread.get(descarga.getId());
          
          if(fDownloader!=null){
              fDownloader.pauseOrContinue();
          }else{
              MyLogger.log("Esta descarga no fue en esta sesion");
          }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        DownloadsTableModel dtm = (DownloadsTableModel) table.getModel();
        Descarga descarga = dtm.getDescargaAtIndex(selectedRow);
        descargaAReanudar = descarga;
        
        if(descarga.getStatus().equals("Incompleta")){
            lastFileSize = descarga.getSize();
            lastFileName = descarga.getName();
            MyLogger.log(descarga.getPath()+","+descarga.getSize());
            MainController.startDownload(descarga.getHostPath(), descarga.getHost(),descarga.getLastByte(),descarga.getId());
        }else{
            JOptionPane.showMessageDialog(this, "Ya ha realizado esta descarga", "No se pudo completar", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void downloadStart(int fId,String file,String path,String host,long size,String hostPath,FileDownloader fileDownloader) {
        if(!isVisible()){
            setVisible(true);
        }

        Descarga nd = new Descarga();
        nd.setId(fId);
        nd.setName(file);
        nd.setPath(path);
        nd.setHost(host);
        nd.setHostPath(hostPath);
        nd.setSize(size);
        desc.add(nd);
        
        descargas.add(file);
        downloadThread.put(fId,fileDownloader);
        
        
        DownloadsTableModel dtm = (DownloadsTableModel) table.getModel();
        
        dtm.addRow(nd);
        
        dtm.fireTableDataChanged();
//        update();
        
    }

    @Override
    public void downloadEnd(int fId,String file) {
        //descargas.remove(file);
        DownloadsTableModel dtm = (DownloadsTableModel) table.getModel();
        Descarga dc = dtm.getDescarga(fId);
        dc.setStatus("Completada");
        dc.setPercent(100);
        jTable1.repaint();

    }

    
    @Override
    public void downloadFail(int fId, String file) {
        DownloadsTableModel dtm = (DownloadsTableModel) table.getModel();
        Descarga dc = dtm.getDescarga(fId);
        dc.setStatus("Incompleta");
        jTable1.repaint();    
    
    }
    
    @Override
    public void updatePercent(int fId,String file, double percent,long bytes) {
        DownloadsTableModel dtm = (DownloadsTableModel) table.getModel();
        Descarga dc = dtm.getDescarga(fId);
        dc.setStatus("Descargando");
        dc.setPercent(((int)percent));
        dc.setLastByte(bytes);
        jTable1.repaint();
    }

    @Override
    public void hostOffline(String file,long size) {
        
        Notificacion.getInstance().startNotificacion("Origen desconectado", "Buscando alternativas");
        boolean encontradas = false;
        
        if(ClientList.clients.size() > 0){
            
            Set<String> keys = clients.keySet();

            for(String key: keys){
                try {
                    MyLogger.log("Alternativa "+key+", ");
                    RemoteMachine rm = RMIServer.find(key);
                    String path = rm.existsFile(lastFileName, descargaAReanudar.getSize());
                    MyLogger.log("Res: "+path);
                    if(!path.isEmpty()){
                        encontradas = true;
                        MainController.startDownload(path,key,descargaAReanudar.getLastByte(),descargaAReanudar.getId());
                        
                        break;
                    }
                } catch (Exception ex) {
                    MyLogger.log(ex.getMessage());
                }
            }
            
        }
        
        if(!encontradas){
            Notificacion.getInstance().startNotificacion("Origen desconectado", "No hay alternativas disponibles");
        }
        
        
    }



}
